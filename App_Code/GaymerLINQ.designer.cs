#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gaymerdb")]
public partial class GaymerLINQDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertUserTable(UserTable instance);
  partial void UpdateUserTable(UserTable instance);
  partial void DeleteUserTable(UserTable instance);
  #endregion
	
	public GaymerLINQDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["gaymerdbConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public GaymerLINQDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GaymerLINQDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GaymerLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GaymerLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<UserTable> UserTables
	{
		get
		{
			return this.GetTable<UserTable>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private int _PersonalInfoID;
	
	private int _GeneralInfoID;
	
	private int _PublicInfoID;
	
	private string _Username;
	
	private string _PasswordHash;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPersonalInfoIDChanging(int value);
    partial void OnPersonalInfoIDChanged();
    partial void OnGeneralInfoIDChanging(int value);
    partial void OnGeneralInfoIDChanged();
    partial void OnPublicInfoIDChanging(int value);
    partial void OnPublicInfoIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    #endregion
	
	public UserTable()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalInfoID", DbType="Int NOT NULL")]
	public int PersonalInfoID
	{
		get
		{
			return this._PersonalInfoID;
		}
		set
		{
			if ((this._PersonalInfoID != value))
			{
				this.OnPersonalInfoIDChanging(value);
				this.SendPropertyChanging();
				this._PersonalInfoID = value;
				this.SendPropertyChanged("PersonalInfoID");
				this.OnPersonalInfoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneralInfoID", DbType="Int NOT NULL")]
	public int GeneralInfoID
	{
		get
		{
			return this._GeneralInfoID;
		}
		set
		{
			if ((this._GeneralInfoID != value))
			{
				this.OnGeneralInfoIDChanging(value);
				this.SendPropertyChanging();
				this._GeneralInfoID = value;
				this.SendPropertyChanged("GeneralInfoID");
				this.OnGeneralInfoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicInfoID", DbType="Int NOT NULL")]
	public int PublicInfoID
	{
		get
		{
			return this._PublicInfoID;
		}
		set
		{
			if ((this._PublicInfoID != value))
			{
				this.OnPublicInfoIDChanging(value);
				this.SendPropertyChanging();
				this._PublicInfoID = value;
				this.SendPropertyChanged("PublicInfoID");
				this.OnPublicInfoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PasswordHash
	{
		get
		{
			return this._PasswordHash;
		}
		set
		{
			if ((this._PasswordHash != value))
			{
				this.OnPasswordHashChanging(value);
				this.SendPropertyChanging();
				this._PasswordHash = value;
				this.SendPropertyChanged("PasswordHash");
				this.OnPasswordHashChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
